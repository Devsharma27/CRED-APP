AWSTemplateFormatVersion: "2010-09-09"
Description: "Create a EC2Instance Security Group S3 bucket DB subnet group and MYSQL Database"
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    AllowedValues:
      - t2.micro
    Type: String
    Default: t2.micro
  
Mappings:
  RegionMap:
    us-east-1:
      HVM64: "ami-0ff8a91507f77f867"
      HVMG2: "ami-0a584ac55a7631c0c"
      
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC-Dev

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Publicsubnet-1
      VpcId: !Ref VPC
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Publicsubnet-2
      VpcId: !Ref VPC
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: VPC Internet Gateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway   
      VpcId: !Ref VPC
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Route Table-1
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PubSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
 
  PubSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-1
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-2
      VpcId: !Ref VPC

  EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

  NAT:
    Type: AWS::EC2::NatGateway
    DependsOn: GatewayAttachment
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: EC2-public

  # NatRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: NAT
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NAT

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: NAT
    Properties:
      Tags:
        - Key: Name
          Value: Route Table-2
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
 
  PrivateSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Security Group 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSH Security Group

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPs acces via port 80/443 locked down to load 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: WEB server security group

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: dev
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      Tags: 
        - Key: Name
          Value: EC2-Dev
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install python3-pip git mysql -y
            sudo git clone "https://github.com/Devsharma27/flask_test.git"
            sudo pip3 install flask
            cd flask_test
            python3 app.py

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '30'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '15'
      HealthyThresholdCount: '5'
      Matcher:
        HttpCode: 200
      Name: EC2TargetGroup
      Port: '80'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds" 
          Value: "20"
        - Key: "load_balancing.algorithm.type"
          Value: "round_robin"
      Targets:
        - Id: !Ref EC2Instance
          Port: '80'
      TargetType: instance
      UnhealthyThresholdCount: '5'
      VpcId: !Ref VPC

  EBSVolume:
    Type: AWS::EC2::Volume
    Properties: 
      Size: 8
      Encrypted: false
      AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
      Tags:
        - Key: Name
          Value: Volume

  EBSMountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance
      VolumeId: !Ref EBSVolume
      Device: /dev/sdh

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https to client host to access on port 80/443
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer   
    Properties:
      Name: ALB-public
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Subnets:  
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: Load Balancer

  ApplicationLoadBalancerListenerForPort80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - EC2Instance
    Properties:
      VersioningConfiguration:
        Status: Enabled
      # WebsiteConfiguration:
      #   IndexDocument: index.html
      #   ErrorDocument: error.html
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: AWS-S3-Bucket
          Value: Bucket
  
  SNSTopic:
    Type: AWS::SNS::Topic

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: Dev.sharma8989@gmail.com
      Protocol: email
      TopicArn: !Ref SNSTopic

  CWAlramCPU:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: true
      AlarmActions: 
      - !Ref SNSTopic
      OKActions: 
      - !Ref SNSTopic
      AlarmDescription: Alart if cpu touches 30%
      AlarmName: Dev-Alram
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '30'
      Dimensions:
      - Name: EC2Instance
        Value: !Ref EC2Instance

  CWAlramMemory:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: true
      AlarmActions: 
      - !Ref SNSTopic
      OKActions: 
      - !Ref SNSTopic
      AlarmDescription: Alart if cpu touches 30%
      AlarmName: dev2-Alram
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      MetricName: "mem_used_percent"
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '30'
      Dimensions:
      - Name: EC2Instance
        Value: !Ref EC2Instance

  # AWSDashboard:
  #   Type: AWS::CloudWatch::Dashboard
  #   Properties: 
  #     DashboardBody: Monitering
  #     DashboardName: string